/* tslint:disable */
/* eslint-disable */
/**
 * tracing-lv-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppLatestInfoDto,
  AppNodeRunDto,
  CursorInfo,
  NodesPageDto,
  TracingKind,
  TracingLevel,
  TracingRecordDto,
  TracingRecordFieldFilter,
  TracingRecordScene,
  TracingTreeRecordDto,
} from '../models/index';
import {
    AppLatestInfoDtoFromJSON,
    AppLatestInfoDtoToJSON,
    AppNodeRunDtoFromJSON,
    AppNodeRunDtoToJSON,
    CursorInfoFromJSON,
    CursorInfoToJSON,
    NodesPageDtoFromJSON,
    NodesPageDtoToJSON,
    TracingKindFromJSON,
    TracingKindToJSON,
    TracingLevelFromJSON,
    TracingLevelToJSON,
    TracingRecordDtoFromJSON,
    TracingRecordDtoToJSON,
    TracingRecordFieldFilterFromJSON,
    TracingRecordFieldFilterToJSON,
    TracingRecordSceneFromJSON,
    TracingRecordSceneToJSON,
    TracingTreeRecordDtoFromJSON,
    TracingTreeRecordDtoToJSON,
} from '../models/index';

export interface ListNodesRequest {
    main_app_id?: string | null;
    after_record_id?: number;
    app_build_ids?: Array<Array<any>> | null;
}

export interface ListRecordsRequest {
    cursor?: CursorInfo;
    count?: number | null;
    search?: string | null;
    scene?: TracingRecordScene | null;
    app_build_ids?: Array<Array<any>> | null;
    app_run_ids?: Array<string> | null;
    node_ids?: Array<string> | null;
    parent_id?: string | null;
    parent_span_t_ids?: Array<number> | null;
    start_time?: Date | null;
    end_time?: Date | null;
    kinds?: Array<TracingKind> | null;
    span_ids?: Array<string> | null;
    targets?: Array<Array<any>> | null;
    name?: Array<any> | null;
    fields?: Array<TracingRecordFieldFilter> | null;
    levels?: Array<TracingLevel> | null;
}

export interface ListTreeRecordsRequest {
    cursor?: CursorInfo;
    count?: number | null;
    search?: string | null;
    scene?: TracingRecordScene | null;
    app_build_ids?: Array<Array<any>> | null;
    app_run_ids?: Array<string> | null;
    node_ids?: Array<string> | null;
    parent_id?: string | null;
    parent_span_t_ids?: Array<number> | null;
    start_time?: Date | null;
    end_time?: Date | null;
    kinds?: Array<TracingKind> | null;
    span_ids?: Array<string> | null;
    targets?: Array<Array<any>> | null;
    name?: Array<any> | null;
    fields?: Array<TracingRecordFieldFilter> | null;
    levels?: Array<TracingLevel> | null;
}

export interface ListTreeRecordsByIdsRequest {
    ids: Array<number>;
}

export interface NodesPageRequest {
    after_record_id?: number;
    app_build_ids?: Array<Array<any>> | null;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async listAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppLatestInfoDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppLatestInfoDtoFromJSON));
    }

    /**
     */
    async listApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppLatestInfoDto>> {
        const response = await this.listAppsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listNodesRaw(requestParameters: ListNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppNodeRunDto>>> {
        const queryParameters: any = {};

        if (requestParameters['main_app_id'] != null) {
            queryParameters['main_app_id'] = requestParameters['main_app_id'];
        }

        if (requestParameters['after_record_id'] != null) {
            queryParameters['after_record_id'] = requestParameters['after_record_id'];
        }

        if (requestParameters['app_build_ids'] != null) {
            queryParameters['app_build_ids'] = requestParameters['app_build_ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/nodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppNodeRunDtoFromJSON));
    }

    /**
     */
    async listNodes(requestParameters: ListNodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppNodeRunDto>> {
        const response = await this.listNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listRecordsRaw(requestParameters: ListRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TracingRecordDto>>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['scene'] != null) {
            queryParameters['scene'] = requestParameters['scene'];
        }

        if (requestParameters['app_build_ids'] != null) {
            queryParameters['app_build_ids'] = requestParameters['app_build_ids'];
        }

        if (requestParameters['app_run_ids'] != null) {
            queryParameters['app_run_ids'] = requestParameters['app_run_ids'];
        }

        if (requestParameters['node_ids'] != null) {
            queryParameters['node_ids'] = requestParameters['node_ids'];
        }

        if (requestParameters['parent_id'] != null) {
            queryParameters['parent_id'] = requestParameters['parent_id'];
        }

        if (requestParameters['parent_span_t_ids'] != null) {
            queryParameters['parent_span_t_ids'] = requestParameters['parent_span_t_ids'];
        }

        if (requestParameters['start_time'] != null) {
            queryParameters['start_time'] = (requestParameters['start_time'] as any).toISOString();
        }

        if (requestParameters['end_time'] != null) {
            queryParameters['end_time'] = (requestParameters['end_time'] as any).toISOString();
        }

        if (requestParameters['kinds'] != null) {
            queryParameters['kinds'] = requestParameters['kinds'];
        }

        if (requestParameters['span_ids'] != null) {
            queryParameters['span_ids'] = requestParameters['span_ids'];
        }

        if (requestParameters['targets'] != null) {
            queryParameters['targets'] = requestParameters['targets'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['levels'] != null) {
            queryParameters['levels'] = requestParameters['levels'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/records`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TracingRecordDtoFromJSON));
    }

    /**
     */
    async listRecords(requestParameters: ListRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TracingRecordDto>> {
        const response = await this.listRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTreeRecordsRaw(requestParameters: ListTreeRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TracingTreeRecordDto>>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['scene'] != null) {
            queryParameters['scene'] = requestParameters['scene'];
        }

        if (requestParameters['app_build_ids'] != null) {
            queryParameters['app_build_ids'] = requestParameters['app_build_ids'];
        }

        if (requestParameters['app_run_ids'] != null) {
            queryParameters['app_run_ids'] = requestParameters['app_run_ids'];
        }

        if (requestParameters['node_ids'] != null) {
            queryParameters['node_ids'] = requestParameters['node_ids'];
        }

        if (requestParameters['parent_id'] != null) {
            queryParameters['parent_id'] = requestParameters['parent_id'];
        }

        if (requestParameters['parent_span_t_ids'] != null) {
            queryParameters['parent_span_t_ids'] = requestParameters['parent_span_t_ids'];
        }

        if (requestParameters['start_time'] != null) {
            queryParameters['start_time'] = (requestParameters['start_time'] as any).toISOString();
        }

        if (requestParameters['end_time'] != null) {
            queryParameters['end_time'] = (requestParameters['end_time'] as any).toISOString();
        }

        if (requestParameters['kinds'] != null) {
            queryParameters['kinds'] = requestParameters['kinds'];
        }

        if (requestParameters['span_ids'] != null) {
            queryParameters['span_ids'] = requestParameters['span_ids'];
        }

        if (requestParameters['targets'] != null) {
            queryParameters['targets'] = requestParameters['targets'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['levels'] != null) {
            queryParameters['levels'] = requestParameters['levels'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/records/tree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TracingTreeRecordDtoFromJSON));
    }

    /**
     */
    async listTreeRecords(requestParameters: ListTreeRecordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TracingTreeRecordDto>> {
        const response = await this.listTreeRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTreeRecordsByIdsRaw(requestParameters: ListTreeRecordsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TracingTreeRecordDto>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling listTreeRecordsByIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/records/tree_by_ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TracingTreeRecordDtoFromJSON));
    }

    /**
     */
    async listTreeRecordsByIds(requestParameters: ListTreeRecordsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TracingTreeRecordDto>> {
        const response = await this.listTreeRecordsByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async nodesPageRaw(requestParameters: NodesPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodesPageDto>> {
        const queryParameters: any = {};

        if (requestParameters['after_record_id'] != null) {
            queryParameters['after_record_id'] = requestParameters['after_record_id'];
        }

        if (requestParameters['app_build_ids'] != null) {
            queryParameters['app_build_ids'] = requestParameters['app_build_ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/nodes/page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodesPageDtoFromJSON(jsonValue));
    }

    /**
     */
    async nodesPage(requestParameters: NodesPageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodesPageDto> {
        const response = await this.nodesPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
